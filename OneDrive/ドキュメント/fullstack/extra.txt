const port = 4000;
const express = require('express');
const app = express();
const mongoose = require('mongoose');
const jwt = require('jsonwebtoken');
const multer = require('multer');
const path = require('path');
const cors = require('cors');
const { error } = require('console');

app.use(express.json());
app.use(cors());

// Database connection with MondoDB

mongoose.connect('mongodb+srv://jana:sanchayan@cluster0.rkddvaq.mongodb.net/fullstack')

// API creation

app.get('/', (req, res) => {
    res.send("Express App is running")
})


// Image storage engine
const storage = multer.diskStorage({
    destination: './upload/images',
    filename: (req, file, cb) => {
        cb(null, `${file.fieldname}_${Date.now()} ${path.extname(file.originalname)}`);
    }
});

const upload = multer({storage: storage})
//creating upload Endpoint for image
app.use('/images', express.static('upload/images'))
app.post('/upload', upload.single('product'), (req, res) => {
    res.json({
        success:1,
        Image_url:`http://localhost:4000/images/${port}/images/${req.file.filename}`
    })})

//creating a schema for products
const Product = mongoose.model('Product', {
    id:{
        type: Number,
        required: true,

    },
    name:{
        type: String,
        required: true,

    },
    image:{
        type: String,
        required: true,
    },
    category:{
        type: String,
        required: true,
    },
    new_price:{
        type: Number,
        required: true,
    },
    old_price:{
        type: Number,
        required: true,
    },
    date:{
        type: Date,
        default: Date.now,
    },
    avalable:{
        type: Boolean,
        default: true,
    }

})
app.post('/addproduct',async (req, res) => {
    let products= await Product.find({});
    let id;
    if(products.length>0){
        let last_product_array = products.slice(-1);
         let last_product=last_product_array[0];
         id=last_product.id+1;
    }
    else{
        id=1;                     
    }
        
    const product = new Product({
        id: req.body.id,
        name: req.body.name,
        image: req.body.image,
        category: req.body.category,
        new_price: req.body.new_price,
        old_price: req.body.old_price,
    });
console.log(product);
await product.save();
console.log("saved");

res.json({
    success: true,
    name:req.body.name,
    
})
})
//creating API for getting all products
app.get('/allproducts', async (req, res) => {
    let products = await Product.find({});
    console.log("All products Fetched");
    res.send(products);

})
    












// creating API for deleting product
app.post('/removeproduct', async (req, res) => {
    await Product.findOneAndDelete({id: req.body.id});
    res.json({
        success: true,
        name: req.body.name,
    })
})










app.listen(port, (error)=>{
    if(! error){
        console.log("server running on port",+port);
    }else{
        console.log("Error:",+error );
    }
})

